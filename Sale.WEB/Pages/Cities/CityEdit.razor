@page "/cities/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Ciudades</h3>

@if (city is null)
{
    <p>Cargando..</p>
}
else
{
    <CityForm @ref="CityForm" city="city" OnvalidSubmit="EditAsync" ReturAction="Return"></CityForm>
}

@code {
    [Parameter]
    public int CityId { get; set; }

    private City? city;

    private CityForm? CityForm;


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<City>($"/api/cities/{CityId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        city = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var respnseHttp = await repository.Put("/api/cities", city);

        if (respnseHttp.Error)
        {
            var message = await respnseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        CityForm!.FormPostSuccessfully = true;
        navigationManager.NavigateTo($"/states/details/{city!.StateId}");
    }

}
