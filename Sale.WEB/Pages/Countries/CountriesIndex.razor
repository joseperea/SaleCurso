@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-globe"></i> Países
            <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="oi oi-plus"></i> Adicionar País</a>
        </span>
    </div>
    <div class="card-body">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            </div>
        </div>

        <GenericList MyList="Countries">
            @*    <Loading>
            <div class="spinner"></div>
            </Loading>*@
            <NoRecords>
                <p>No hay paises para mostrar.</p>
            </NoRecords>
            <Body>
                <table class="table table-striped">
                    <caption>
                        <Pagination CurrentPage="currentPage"
                                    TotalPages="TotalPages"
                                    SelectedPage="SelectedPageAsync" />
                    </caption>
                    <thead>
                        <tr>
                            <th>País</th>
                            <th style="width:220px">Estado/Departamentos</th>
                            <th style="width:260px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var country in Countries!)
                        {
                            <tr>
                                <td>
                                    @country.Name
                                </td>
                                <td>
                                    @country.StatesNumber
                                </td>
                                <td>
                                    <a class="btn btn-outline-info" href="/countries/details/@country.Id"> Detalles</a>
                                    <a class="btn btn-outline-warning" href="/countries/edit/@country.Id">Editar</a>
                                    <button class="btn btn-outline-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>

@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int TotalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }


        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/countries?page={page}";
            url2 = $"api/countries/totalPages";
        }
        else
        {
            url1 = $"api/countries?page={page}&filter={Filter}";
            url2 = $"api/countries/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Country>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);

            Countries = responseHppt.Response!;
            TotalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(int Id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Realmente Desea eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/countries/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }


    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}


